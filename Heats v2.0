import random
import csv

def generate_heat_draw(teams, num_lanes):
    """Generates a heat draw, distributing teams randomly."""
    random.shuffle(teams)
    races = []
    num_races = (len(teams) + num_lanes - 1) // num_lanes
    for i in range(num_races):
        race_teams = []
        for lane in range(num_lanes):
            team_index = i * num_lanes + lane
            if team_index < len(teams):
                race_teams.append(teams[team_index])
            else:
                race_teams.append(None)
        races.append(race_teams)
    return races

def get_team_lanes(heat):
    """Returns a dict mapping each team to their lane number in Heat 1."""
    team_lanes = {}
    for race in heat:
        for lane_num, team in enumerate(race):
            if team is not None:
                team_lanes[team] = lane_num
    return team_lanes

def get_race_opponents(heat):
    """Returns a dict mapping each team to a set of teams they raced against."""
    opponents = {}
    for race in heat:
        teams_in_race = [team for team in race if team is not None]
        for team in teams_in_race:
            if team not in opponents:
                opponents[team] = set()
            opponents[team].update(t for t in teams_in_race if t != team)
    return opponents

def get_last_two_race_teams(heat):
    """Returns a set of teams that raced in the last two races of Heat 1."""
    last_two = []
    if len(heat) >= 2:
        last_two = heat[-2] + heat[-1]
    elif len(heat) == 1:
        last_two = heat[-1]
    return set(team for team in last_two if team is not None)

def generate_heat2_draw(teams, num_lanes, heat1_opponents, heat1_lanes, last_two_teams):
    """Generates Heat 2 ensuring no team races against previous opponents, in the same lane, or in the first two races if they raced last in Heat 1."""
    teams = teams.copy()
    random.shuffle(teams)
    races = []
    num_races = (len(teams) + num_lanes - 1) // num_lanes
    assigned = set()
    for race_idx in range(num_races):
        race_teams = [None] * num_lanes
        available = [t for t in teams if t not in assigned]
        # For the first two races, avoid teams from last two races of Heat 1 if possible
        avoid_set = last_two_teams if race_idx < 2 else set()
        for lane in range(num_lanes):
            # Find a team for this lane
            possible_teams = [
                t for t in available
                if t not in avoid_set
                and all(t not in heat1_opponents.get(other, set()) for other in race_teams if other)
                and heat1_lanes.get(t, -1) != lane
            ]
            if not possible_teams:
                # Relax: allow teams from avoid_set if needed
                possible_teams = [
                    t for t in available
                    if all(t not in heat1_opponents.get(other, set()) for other in race_teams if other)
                    and heat1_lanes.get(t, -1) != lane
                ]
            if not possible_teams:
                # Relax: allow same lane if needed
                possible_teams = [
                    t for t in available
                    if all(t not in heat1_opponents.get(other, set()) for other in race_teams if other)
                ]
            if not possible_teams:
                # Relax: allow any available team
                possible_teams = available
            if possible_teams:
                team = random.choice(possible_teams)
                race_teams[lane] = team
                assigned.add(team)
                available.remove(team)
        races.append(race_teams)
    return races

# Import team names from a CSV file
csv_filename = "teams.csv"
all_teams = []
with open(csv_filename, newline='', encoding='utf-8') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        if row:
            all_teams.append(row[0])

# Ask user for number of lanes
num_lanes_event = int(input("How many lanes does the race have? "))

# Generate Heat 1
heat1 = generate_heat_draw(all_teams.copy(), num_lanes_event)

print("--- Heat 1 Draw ---")
for i, race in enumerate(heat1):
    print(f"Race {i+1}:")
    for lane_num, team in enumerate(race):
        if team is not None:
            print(f"  Lane {lane_num+1}: {team}")
        else:
            print(f"  Lane {lane_num+1}: EMPTY")
    print("-" * 20)

# Get opponents and lanes from Heat 1
heat1_opponents = get_race_opponents(heat1)
heat1_lanes = get_team_lanes(heat1)
last_two_teams = get_last_two_race_teams(heat1)

# Generate Heat 2 with constraints
heat2 = generate_heat2_draw(all_teams, num_lanes_event, heat1_opponents, heat1_lanes, last_two_teams)

print("--- Heat 2 Draw ---")
for i, race in enumerate(heat2):
    print(f"Race {i+1}:")
    for lane_num, team in enumerate(race):
        if team is not None:
            print(f"  Lane {lane_num+1}: {team}")
        else:
            print(f"  Lane {lane_num+1}: EMPTY")
    print("-" * 20)